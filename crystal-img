#!/usr/bin/env python3
#
# A tool for installing crystal and the linux kernel to an image
#
import os
import sys
import argparse

MBR_OFFSET_PART_TABLE = 446
MBR_OFFSET_SIGNATURE  = 510
MBR_PART_TABLE_SIZE = MBR_OFFSET_SIGNATURE - MBR_OFFSET_PART_TABLE

CRYSTAL_RESERVE_SECTOR_COUNT = 16
CRYSTAL_RESERVE_SIZE = CRYSTAL_RESERVE_SECTOR_COUNT * 512

KERNEL_CMD_LINE_SECTOR = 16
KERNEL_SECTOR = 17

#
# TODO: Add a command to show what's in the image
#       crystal-img status <image>
#         mbr (verified because first sector ends in 0x55aa)
#            bootsector code: yes
#
#         is it mbr?
#             is there bootsector code in the mbr?
#             what partitions are in the mbr?
#         what is the kernel command line?
#         how big is the kenrnel?
#         is an initrd installed? how big is it?
#         make sure that the kernel/initrd don't overlap with any partition
#

# TODO: implement this
class PartitionTable:
    def __init__(self):
        pass

def usage():
    print("""Usage: crystal-img <command> <args>

Installs crystal and/or the linux kernel into the given disk image. The disk
image should be a raw MBR partitioned image. It should have a fixed size at the
start of the disk for crystal and the kernel.

Commands:
  install-crystal <image> <crystal>

  read-kernel-cmd-line <image>
  set-kernel-cmd-line <image> <kernel-command-line>...

  install-kernel <image> <kernel-reserve-size> <kernel> [<initrd>]
""")

if len(sys.argv) <= 1:
    usage()
    sys.exit(1)

def get_nearest_sector_aligned_size(size):
    lower_bits = size & 0x1FF
    masked = size & ~lower_bits
    #print("[DEBUG] size = 0x%x, lower = 0x%x, masked = 0x%x" % (size, lower_bits, masked))
    if lower_bits != 0:
        masked += 0x200
    return masked

def parse_size(size_string):
    index = 0
    while index < len(size_string):
        c = size_string[index]
        if not c.isdigit():
            break
        index += 1

    num_string = size_string[:index]
    unit = size_string[index:]
    if unit == "":
        return int(num_string)
    if unit == "M":
        return int(num_string) * 1024 * 1024
    else:
        sys.exit("Error: size '%s' has an uknown unit '%s'" % (size_string, unit))

def verify_image(image_filename):
    if not os.path.exists(image_filename):
        sys.exit("Error: image '%s' does not exist" % image_filename)
    return image_filename


def install_crystal(args):
    if len(args) != 2:
        sys.exit("Error: install-crystal requires 2 arguments: <image> <crystal>")
    image_filename = verify_image(args[0])
    crystal_file = args[1]
    if not os.path.exists(crystal_file):
        sys.exit("Error: crystal binary '%s' does not exist" % crystal_file)

    # check the file size before reading it
    crystal_size = os.path.getsize(crystal_file)
    if crystal_size >= CRYSTAL_RESERVE_SIZE:
        sys.exit("Error: crystal binary '%s' is too large, size is %s but max is %s" % (
            crystal_file, crystal_size, CRYSTAL_RESERVE_SIZE))
    with open(crystal_file, "rb") as file:
        crystal_bin = file.read()
    if len(crystal_bin) != crystal_size:
        sys.exit("Error: thought size of crystal was %s but is %s" % (crystal_size, len(crystal_bin)))

    print("Installing crystal (%s bytes)" % crystal_size)
    with open(image_filename, "r+b") as file:
        print("Writing crystal bootstap code (%s bytes)..." % MBR_OFFSET_PART_TABLE)
        file.seek(0)
        file.write(crystal_bin[0:MBR_OFFSET_PART_TABLE])
        print("Writing crystal second stage (%s bytes)..." % (len(crystal_bin) - MBR_OFFSET_SIGNATURE))
        file.seek(MBR_OFFSET_SIGNATURE)
        file.write(crystal_bin[MBR_OFFSET_SIGNATURE:])

def install_kernel(args):
    if len(args) < 3 or len(args) > 4:
        sys.exit("Error: install-kernel requires 3 or 4 arguments: <image> <kernel-reserve-size> <kernel> [<initrd>]")
    image_filename = verify_image(args[0])
    kernel_reserve_size = parse_size(args[1])
    kernel_file = args[2]
    if len(args) >= 4:
        initrd_file = args[3]
    else:
        initrd_file = None

    if not os.path.exists(kernel_file):
        sys.exit("Error: kernel image '%s' does not exist" % kernel_file)
    if initrd_file and not os.path.exists(initrd_file):
        sys.exit("Error: initrd file '%s' does not exist" % initrd_file)

    kernel_size = os.path.getsize(kernel_file)
    if initrd_file:
        initrd_size = os.path.getsize(initrd_file)
        if initrd_size > 0xFFFFFFFF:
            sys.exit("Error: initrd file size '%s' is too large to fit in 32 bits" % initrd_size)
    else:
        initrd_size = 0

    kernel_size_sector_aligned = get_nearest_sector_aligned_size(kernel_size)
    initrd_size_sector_aligned = get_nearest_sector_aligned_size(initrd_size)

    if kernel_reserve_size != 0 and kernel_size_sector_aligned + initrd_size_sector_aligned > kernel_reserve_size:
        sys.exit("Error: kernel image size '%s' plus initrd size '%s' is too large to fit in kernel reserve size %s"
                 % (kernel_size_sector_aligned, initrd_size_sector_aligned, kernel_reserve_size))

    with open(image_filename, "r+b") as image_file:
        # TODO: read the partition table to make sure there will be no overlap with the
        #       kernel/initramfs
        with open(kernel_file, "rb") as read_file:
            print("Installing kernel (%s bytes, aligned to %s)" % (kernel_size, kernel_size_sector_aligned))
            image_file.seek(KERNEL_SECTOR * 512)
            image_file.write(read_file.read())
            # pad zeros to the end of the sector
            image_file.write(b"\0" * (kernel_size_sector_aligned - kernel_size))

        print("Installing initrd (%s bytes, aligned to %s)"
              % (initrd_size, initrd_size_sector_aligned))
        image_file.write(initrd_size.to_bytes(4, byteorder='little', signed=False))
        # pad zeros to the end of the sector
        image_file.write(b"\0" * 508)
        if initrd_file:
            with open(initrd_file, "rb") as read_file:
                image_file.write(read_file.read())
                image_file.write(b"\0" * (initrd_size_sector_aligned - initrd_size))

def read_kernel_cmd_line(args):
    if len(args) != 1:
        sys.exit("Error: read-kernel-cmd-line requires 1 argument")
    image_filename = verify_image(args[0])
    with open(image_filename, "rb") as file:
        file.seek(KERNEL_CMD_LINE_SECTOR * 512) # todo: handle file too small errors
        cmd_line = file.read(512)
    for i in range(0, len(cmd_line)):
        if cmd_line[i] == 0:
            cmd_line = cmd_line[:i]
            break;
    print(cmd_line.decode("ASCII"))
def set_kernel_cmd_line(args):
    if len(args) < 1:
        sys.exit("Error: read-kernel-cmd-line requires at least 1 argument")
    image_filename = verify_image(args[0])

    cmd_line = b""
    next_arg = 2
    for arg in args[1:]:
        if len(cmd_line) > 0 and cmd_line[-1] != " ":
            cmd_line += b" "
        cmd_line += arg.encode("ASCII")
    if len(cmd_line) > 511:
        sys.exit("Error: kernel command line is too big, size is %s, max is %s" % (len(cmd_line), 511))
    print("Setting kernel cmd line to \"%s\"" % cmd_line.decode("ASCII"))
    with open(image_filename, "r+b") as file:
        file.seek(KERNEL_CMD_LINE_SECTOR * 512) # todo: handle file too small errors
        file.write(cmd_line)
        file.write(b'\0' * (512 - len(cmd_line))) # pad with zeros till end of sector

command = sys.argv[1]
args = sys.argv[2:]
if command == "install-crystal":
    install_crystal(args)
elif command == "read-kernel-cmd-line":
    read_kernel_cmd_line(args)
elif command == "set-kernel-cmd-line":
    set_kernel_cmd_line(args)
elif command == "install-kernel":
    install_kernel(args)
else:
    sys.exit("Error: unknown command '%s'" % command)
